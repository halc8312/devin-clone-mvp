name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend/core
        
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: devin
          POSTGRES_PASSWORD: devin123
          POSTGRES_DB: devin_clone_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql+asyncpg://devin:devin123@localhost:5432/devin_clone_test
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        BACKEND_CORS_ORIGINS=["http://localhost:3000"]
        PROJECT_NAME=Devin Clone Test
        VERSION=0.1.0
        API_V1_STR=/api/v1
        ANTHROPIC_API_KEY=test-key
        STRIPE_SECRET_KEY=sk_test_dummy
        STRIPE_WEBHOOK_SECRET=whsec_dummy
        DEBUG=True
        ENVIRONMENT=test
        EOF
        
    - name: Run Black formatter check
      run: black --check .
      
    - name: Run Ruff linter
      run: ruff check .
      
    - name: Run MyPy type checker
      run: mypy . --ignore-missing-imports
      continue-on-error: true
      
    - name: Run tests
      run: |
        pytest -v --cov=app --cov-report=xml
      env:
        PYTHONPATH: .
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/core/coverage.xml
        flags: backend
        
  security-scan:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend/core
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r app/ -ll -i
      continue-on-error: true